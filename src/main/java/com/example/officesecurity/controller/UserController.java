package com.example.officesecurity.controller;


import com.example.officesecurity.model.UserDAO;
import com.example.officesecurity.repository.UserRepository;
import com.example.officesecurity.service.UserService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController // This means that this class is a RestController
@RequiredArgsConstructor// This means to get the bean called userRepository
@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
public class UserController {

    // Which is auto-generated by Spring, we will use it to handle the data
    private final UserService userService;
    private final UserRepository userRepository;

    @PostMapping(path = "/users/register")
    public ResponseEntity<String> registerUser(@RequestBody UserDAO newUser) {

        UserDAO byUserName = userRepository.findByUserName(newUser.getUserName());
        if (byUserName == null) {
            userService.addUser(newUser);
            return ResponseEntity.ok("new user registered");
        }
        return ResponseEntity.badRequest().body("user exist");
    }

    @PostMapping("/users/login")
    public ResponseEntity<String> loginUsers(@RequestBody UserDAO userDAO) {
        UserDAO byUserName = userRepository.findByUserName(userDAO.getUserName());
        if (byUserName== null){
            return ResponseEntity.badRequest().body("user not found");
        }
        byUserName.setLoggedIn(true);
        userService.saveUser(byUserName);

        return ResponseEntity.ok("saved");
    }

    @PostMapping("/users/logout")
    public ResponseEntity<String> logUserOut(@RequestBody UserDAO userDAO) {
        UserDAO byUserName = userRepository.findByUserName(userDAO.getUserName());
        if (byUserName== null){
            return ResponseEntity.badRequest().body("user not found");
        }
        byUserName.setLoggedIn(false);
        userService.saveUser(byUserName);

        return ResponseEntity.ok("saved");
    }


    @GetMapping(path = "/all")
    public List<UserDAO> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
    @GetMapping(path = "/all/remove")
    public ResponseEntity<String> removeAllUsers() {
        // This returns a JSON or XML with the users
        userRepository.deleteAll();
        return ResponseEntity.ok().build();
    }
}
